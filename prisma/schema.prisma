// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                 Int      @id @default(autoincrement())
  email              String   @unique
  fullname           String?
  hashedPassword     String
  hashesRefreshToken String?
  isActive           Boolean  @default(false)
  isDelete           Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model PaymentMethod {
  id        Int      @id @default(autoincrement())
  name      String
  number    String
  bank      String
  isActive  Boolean  @default(false)
  isDelete  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Maintenance {
  id            Int      @id @default(autoincrement())
  platform_cost Int
  topup_cost    Int
  isActive      Boolean  @default(false)
  isDelete      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Region {
  id        Int      @id @default(autoincrement())
  city      String
  district  String
  isActive  Boolean  @default(false)
  isDelete  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Unit {
  id              Int              @id @default(autoincrement())
  name            String
  unit            String
  partnerProfiles PartnerProfile[]
}

model Partner {
  id                 Int               @id @default(autoincrement())
  email              String
  hashedPassword     String
  hashesRefreshToken String?
  partnerProfile     PartnerProfile?
  partnerBalance     PartnerBalance?
  isActive           Boolean           @default(false)
  isDelete           Boolean           @default(false)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  partnerProfileId   Int?
  Location           Location[]
  PartnerRequest     PartnerRequest[]
  Room               Room[]
  PartnerWithdraw    PartnerWithdraw[]
  Booking            Booking[]
  PartnerRate        PartnerRate[]
  PartnerReport      PartnerReport[]
}

model PartnerProfile {
  id Int @id @default(autoincrement())

  name      String
  email     String
  phone     String
  address   String
  regionId  Int
  isActive  Boolean  @default(false)
  isDelete  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Unit      Unit?    @relation(fields: [unitId], references: [id])
  unitId    Int?
  partner   Partner  @relation(fields: [partnerId], references: [id])
  partnerId Int      @unique
}

model PartnerBalance {
  id        Int      @id @default(autoincrement())
  partner   Partner  @relation(fields: [partnerId], references: [id])
  partnerId Int      @unique
  balance   Int
  isActive  Boolean  @default(false)
  isDelete  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Advertisement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  image     String
  isActive  Boolean  @default(false)
  isDelete  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id        Int     @id @default(autoincrement())
  maps      String
  longitude String
  latitude  String
  address   String
  district  String
  city      String
  isActive  Boolean @default(false)
  partner   Partner @relation(fields: [partnerId], references: [id])
  partnerId Int
}

model PartnerRequest {
  id             Int              @id @default(autoincrement())
  title          String
  category       String
  image          String
  partner        Partner          @relation(fields: [partnerId], references: [id])
  partnerId      Int
  isActive       Boolean          @default(false)
  isDelete       Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  PartnerMessage PartnerMessage[]
}

model PartnerMessage {
  id               Int            @id @default(autoincrement())
  title            String
  image            String
  is_admin         Boolean        @default(false)
  partnerRequest   PartnerRequest @relation(fields: [partnerRequestId], references: [id])
  partnerRequestId Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Room {
  id          Int       @id @default(autoincrement())
  name        String
  type        String
  price       Int
  description String
  number      Int
  partner     Partner   @relation(fields: [partnerId], references: [id])
  partnerId   Int
  isActive    Boolean   @default(false)
  isDelete    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Booking     Booking[]
}

model Image {
  id        Int      @id @default(autoincrement())
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PartnerWithdraw {
  id        Int      @id @default(autoincrement())
  partner   Partner  @relation(fields: [partnerId], references: [id])
  partnerId Int
  amount    Int
  bank      String
  number    String
  name      String
  status    String
  proof     String
  isActive  Boolean  @default(false)
  isDelete  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                 Int               @id @default(autoincrement())
  email              String            @unique
  fullname           String?
  hashedPassword     String
  hashesRefreshToken String?
  isActive           Boolean           @default(false)
  isDelete           Boolean           @default(false)
  dateOfBirth        DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  UserBalance        UserBalance?
  UserTransaction    UserTransaction[]
  Booking            Booking[]
  PartnerRate        PartnerRate[]
  PartnerReport      PartnerReport[]
}

model UserBalance {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  balance   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserTransaction {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  total     Int
  isTopup   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    Int
  partner   Partner  @relation(fields: [partnerId], references: [id])
  partnerId Int
  qrCode    String
  code      String
  status    String
  total     Int
  amount    Int
  isActive  Boolean  @default(false)
  isDelete  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PartnerRate {
  id        Int      @id @default(autoincrement())
  partner   Partner  @relation(fields: [partnerId], references: [id])
  partnerId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  rate      Int
  comment   String
  isActive  Boolean  @default(false)
  isDelete  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PartnerReport {
  id          Int      @id @default(autoincrement())
  partner     Partner  @relation(fields: [partnerId], references: [id])
  partnerId   Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  description String
  proof       String
  isActive    Boolean  @default(false)
  isDelete    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
